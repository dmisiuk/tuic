name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string

env:
  GO_VERSION: '1.21'
  BINARY_NAME: 'ccpm'

jobs:
  test-and-validate:
    name: Test and Validate
    runs-on: ubuntu-latest

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: go test -v -race ./...

    - name: Run security scan
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  build:
    name: Build ${{ matrix.target_os }}/${{ matrix.target_arch }}
    runs-on: ${{ matrix.os }}
    needs: test-and-validate
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target_os: linux
            target_arch: amd64
            binary_name: ccpm-linux-amd64
          - os: ubuntu-latest
            target_os: linux
            target_arch: arm64
            binary_name: ccpm-linux-arm64
          - os: ubuntu-latest
            target_os: linux
            target_arch: 386
            binary_name: ccpm-linux-386
          - os: windows-latest
            target_os: windows
            target_arch: amd64
            binary_name: ccpm-windows-amd64.exe
          - os: windows-latest
            target_os: windows
            target_arch: 386
            binary_name: ccpm-windows-386.exe
          - os: macos-latest
            target_os: darwin
            target_arch: amd64
            binary_name: ccpm-macos-amd64
          - os: macos-latest
            target_os: darwin
            target_arch: arm64
            binary_name: ccpm-macos-arm64

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build ${{ matrix.binary_name }}
      env:
        GOOS: ${{ matrix.target_os }}
        GOARCH: ${{ matrix.target_arch }}
        CGO_ENABLED: 0
      run: |
        go build -a -installsuffix cgo -ldflags="-s -w" -o ${{ matrix.binary_name }} .
        ls -la ${{ matrix.binary_name }}

    - name: Check binary size
      run: |
        size=$(stat -c%s ${{ matrix.binary_name }})
        echo "Binary size: $size bytes"
        if [ $size -gt 5242880 ]; then
          echo "Binary size exceeds 5MB limit"
          exit 1
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.binary_name }}
        path: ${{ matrix.binary_name }}

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test-and-validate

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./... | tee benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.txt

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, benchmark]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -name "ccpm-*" -type f | while read file; do
          mv "$file" "release-assets/"
        done
        ls -la release-assets/

    - name: Generate checksums
      run: |
        cd release-assets
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## CCPM Release ${{ github.ref_name }}

          ### Changes
          ${github.event.head_commit.message}

          ### Installation
          Download the binary for your platform and make it executable:
          ```bash
          chmod +x ccpm-*
          ```

          ### Binaries
          - ccpm-linux-amd64: Linux x86_64
          - ccpm-linux-arm64: Linux ARM64
          - ccpm-linux-386: Linux 32-bit
          - ccpm-windows-amd64.exe: Windows x86_64
          - ccpm-windows-386.exe: Windows 32-bit
          - ccpm-macos-amd64: macOS x86_64
          - ccpm-macos-arm64: macOS ARM64 (Apple Silicon)

          ### Verification
          Verify the checksums of downloaded files:
          ```bash
          sha256sum -c checksums.txt
          ```
        files: |
          release-assets/*
          release-assets/checksums.txt
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}